---
description: Backend API 개발 규칙
globs: ["backend/app/api/**/*.py", "backend/app/schemas/**/*.py"]
alwaysApply: false
---

# Backend API 개발 규칙

## FastAPI 엔드포인트 구조

- RESTful API 설계 원칙 준수
- HTTP 상태 코드 적절히 사용
- API 버전 관리 (`/api/v1/`)
- 비동기 함수는 `async/await` 사용

## Pydantic 스키마 규칙

- 모든 요청/응답에 Pydantic 모델 사용
- 타입 힌트 필수 사용
- 검증 규칙 명확히 정의
- 스키마는 `schemas/` 폴더에 정의

## 에러 처리

- FastAPI HTTPException 사용
- 일관된 에러 응답 형식
- 적절한 HTTP 상태 코드 반환

## 예시 템플릿

```python
from fastapi import APIRouter, HTTPException, status
from pydantic import BaseModel
from typing import List, Optional

router = APIRouter()

class ItemCreate(BaseModel):
    name: str
    description: Optional[str] = None
    price: float

class ItemResponse(BaseModel):
    id: int
    name: str
    description: Optional[str]
    price: float

@router.post("/items", response_model=ItemResponse, status_code=status.HTTP_201_CREATED)
async def create_item(item: ItemCreate):
    try:
        # 비즈니스 로직 구현
        new_item = await item_service.create_item(item)
        return new_item
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"Failed to create item: {str(e)}"
        )

@router.get("/items", response_model=List[ItemResponse])
async def get_items(skip: int = 0, limit: int = 100):
    items = await item_service.get_items(skip=skip, limit=limit)
    return items
```
